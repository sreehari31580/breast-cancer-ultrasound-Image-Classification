from __future__ import annotations
from pathlib import Path
from datetime import datetime
from typing import Dict, Optional

from fpdf import FPDF


def generate_pdf_report(
    *,
    output_dir: Path,
    original_image_path: Optional[Path],
    gradcam_image_path: Optional[Path],
    filename: str,
    predicted_label: str,
    probabilities: Dict[str, float],
    model_version: str,
    username: str,
    patient_id: Optional[str] = None,
    disclaimer: str = "This report is generated by an AI system and is intended for decision support only. Not a diagnostic result.",
) -> Path:
    """Generate a one-page PDF clinical-style report using fpdf2 and return its path."""
    output_dir.mkdir(parents=True, exist_ok=True)
    ts = datetime.now().strftime("%Y%m%d_%H%M%S")
    safe_base = Path(filename).stem[:60]
    pdf_path = output_dir / f"report_{safe_base}_{ts}.pdf"

    pdf = FPDF(orientation="P", unit="mm", format="A4")
    pdf.add_page()

    # Header
    pdf.set_font("Arial", "B", 16)
    pdf.cell(0, 10, "Breast Cancer AI Report", ln=1)
    pdf.set_font("Arial", size=9)
    pdf.cell(0, 6, f"Generated: {datetime.now().isoformat(timespec='seconds')}", ln=1)

    # Meta
    pdf.set_font("Arial", size=11)
    pdf.cell(40, 8, "Filename:")
    pdf.cell(0, 8, filename, ln=1)
    pdf.cell(40, 8, "Predicted Label:")
    pdf.cell(0, 8, predicted_label, ln=1)
    pdf.cell(40, 8, "Model Version:")
    pdf.cell(0, 8, model_version, ln=1)
    pdf.cell(40, 8, "User:")
    pdf.cell(0, 8, username, ln=1)
    if patient_id:
        pdf.cell(40, 8, "Patient ID:")
        pdf.cell(0, 8, patient_id, ln=1)

    # Probabilities
    pdf.set_font("Arial", "B", 12)
    pdf.cell(0, 8, "Probabilities", ln=1)
    pdf.set_font("Arial", size=11)
    for cls, p in probabilities.items():
        pdf.cell(0, 6, f"{cls}: {p:.2%}", ln=1)

    # Images side-by-side (scaled)
    y_start = 150
    img_w = 80
    x1 = 10
    x2 = x1 + img_w + 10
    if original_image_path and original_image_path.exists():
        try:
            pdf.image(str(original_image_path), x=x1, y=y_start, w=img_w)
            pdf.set_y(y_start + img_w + 5)
            pdf.set_x(x1)
            pdf.set_font("Arial", size=9)
            pdf.cell(img_w, 5, "Original", ln=0)
        except Exception:
            pass
    if gradcam_image_path and gradcam_image_path.exists():
        try:
            pdf.image(str(gradcam_image_path), x=x2, y=y_start, w=img_w)
            pdf.set_y(y_start + img_w + 5)
            pdf.set_x(x2)
            pdf.set_font("Arial", size=9)
            pdf.cell(img_w, 5, "Grad-CAM", ln=0)
        except Exception:
            pass

    # Disclaimer
    pdf.set_y(285)
    pdf.set_font("Arial", size=8)
    pdf.multi_cell(0, 4, disclaimer)

    pdf.output(str(pdf_path))
    return pdf_path
